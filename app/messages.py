from datetime import datetime
from typing import Mapping

from app.utils import calculate_timedelta


def start_deployment(event: Mapping) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–µ–ø–ª–æ—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ event.

    :param event: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–µ
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¢–ì
    """
    return (
        "‚öôÔ∏è –ó–∞–ø—É—â–µ–Ω–∞ —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n"
        f"<a href='{event['deployable_url']}'>{event['project']['name']}</a>\n\n"
        f"üå≥: {event['ref']}\n"
        f"üë®üèº‚Äçüíª: {event['user']['name']}\n\n"
        f"‚úçÔ∏è Last commit:\n <code>{event['commit_title']}</code>\n\n"
        f"‚åõÔ∏è –û–∫—Ä—É–∂–µ–Ω–∏–µ <b>{event['environment']}</b> —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ"
    )


def success_deployment(event: Mapping) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞.

    :param event: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–µ
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¢–ì
    """
    event_id: str = str(event['deployment_id'])
    deployment_time: datetime = calculate_timedelta(event_id)
    availability: str = f"–û–∫—Ä—É–∂–µ–Ω–∏–µ <b>{event['environment']}</b> –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n"

    return (
        f" ‚úÖ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {event['project']['name']}\n\n"
        f"‚åõÔ∏è –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: {deployment_time.strftime('%M:%S')}\n\n"
        f"{availability}"
        f"<b>{event['environment_external_url']}</b>\n\n"
        f"–û—Ç—á–µ—Ç –æ —Å–±–æ—Ä–∫–µ:\n{event['deployable_url']}"
    )


def failed_deployment(event: Mapping) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.

    :param event: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–µ
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¢–ì
    """
    project_name = event['project']['name']

    return (
        f"üî• Oops!\n\n"
        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}\n\n"
        f"–û—Ç—á–µ—Ç –æ —Å–±–æ—Ä–∫–µ\n{event['deployable_url']}"
    )


def canceled_deployment(event: Mapping) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞.

    :param event: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–µ
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¢–ì
    """
    project_name = event['project']['name']
    gitlab_user = event['user']['name']

    return (
        f"ü§î –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\n"
        f"üë®üèº‚Äçüíª: {gitlab_user}"
    )


def format_alert_message(alert: Mapping) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –∏–∑ –≥—Ä–∞—Ñ–∞–Ω—ã"""

    alert_name = str(alert['labels']['alertname'])
    node_exporter_instance = str(alert['labels']['instance'])
    summary = str(alert['annotations']['summary'])

    return (
        f"üî• Alert firing: {alert_name}\n"
        f"<code>source={node_exporter_instance}</code>\n\n"
        f"{summary}"
    )
