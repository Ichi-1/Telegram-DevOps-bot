from datetime import datetime
from enum import Enum
from typing import Mapping, Sequence

from telebot import TeleBot
from telebot.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)

from app.messages import (
    canceled_deployment,
    failed_deployment,
    format_alert_message,
    start_deployment,
    success_deployment,
)
from app.settings import STORAGE, settings
from app.utils import get_running_apps

bot = TeleBot(token=settings.BOT_TOKEN, parse_mode="HTML")


@bot.message_handler(commands=["help"])
def check_running_apps(message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.

    *–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π RUNNING_APPS
    """
    bot.send_message(settings.CHAT_ID, get_running_apps())


@bot.callback_query_handler(lambda q: q.data == "accept_alert")
def accept_alert(callback: CallbackQuery) -> None:
    """–û—Ç–≤–µ—Ç –Ω–∞ alert."""

    bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.id,
        text=(
            f"{callback.message.text}\n"
            f"\n@{callback.from_user.username} –Ω–µ –ø—Ä–æ—à—ë–ª –º–∏–º–æ –∏ —Å–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å —ç—Ç–∏–º –∞–ª–µ—Ä—Ç–æ–º!"
        )
    )
    bot.answer_callback_query(callback.id)


def notify_alert(alerts: Sequence[Mapping]) -> None:
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ–± alert –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.

    –í—Ä–µ–º—è –∫–æ–≥–¥–∞ alert –±—ã–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    –í –±—É–¥—É—â–µ–º —Å –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞.
    """
    for alert in alerts:

        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîï Silence!", url=alert["silenceURL"]),
            # InlineKeyboardButton("–û—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å", callback_data="accept_alert")
        )
        bot.send_message(
            settings.CHAT_ID,
            format_alert_message(alert),
            reply_markup=keyboard,
        )


class GitlabEvents:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏–π –∏–∑ Gitlab."""

    class DeploymentStatus(str, Enum):
        SUCCESS = "success"
        RUNNING = "running"
        CANCELED = "canceled"
        FAILED = "failed"

    def notify_deployment_status(self, event: dict) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ CI pipeline.

        –ü—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ running - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∫–∏ –≤ storage
        –ü—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ success - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏, –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - —É–¥–∞–ª—è–µ–º k,v –∏–∑ storage
        –ü—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ failed - –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        –ü—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ canceled - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ+—É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∫–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        """
        event_id: str = f"{event['deployment_id']}"

        if event["status"] == self.DeploymentStatus.RUNNING:
            bot.send_message(settings.CHAT_ID, start_deployment(event))
            STORAGE.set(event_id, datetime.now().timestamp())

        if event["status"] == self.DeploymentStatus.SUCCESS:
            bot.send_message(settings.CHAT_ID, success_deployment(event))
            STORAGE.rem(event_id)

        if event["status"] == self.DeploymentStatus.FAILED:
            bot.send_message(settings.CHAT_ID, failed_deployment(event))

        if event["status"] == self.DeploymentStatus.CANCELED:
            bot.send_message(settings.CHAT_ID, canceled_deployment(event))
            STORAGE.rem(event_id)
