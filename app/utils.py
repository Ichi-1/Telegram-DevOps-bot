import functools
from datetime import datetime, time
from typing import Any, Literal

import requests
from loguru import logger

from app.settings import STORAGE, settings


def calculate_timedelta(uuid: str) -> datetime:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏.

    (–¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ alert)
    """
    start_time: Any | Literal[False] = STORAGE.get(uuid)

    if start_time is False:
        raise ValueError("Can not calculate timedelta: uuid record don't exist yet")
    if not isinstance(start_time, float):
        raise TypeError(f"start_time is not a float - {type(start_time)}")

    return datetime.fromtimestamp(datetime.now().timestamp() - start_time)


def get_running_apps() -> str:
    """–£–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —Å—Ç–µ–∫–µ."""
    statuses = []

    for name, url in settings.running_apps.items():
        response = requests.get(url, timeout=60)

        if response.status_code == 200:
            statuses.append(f"{name.capitalize()} üü¢\n{url}\n")
        else:
            statuses.append(f"üõë {url}\n")

    return f"–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n" + "".join(statuses)


def handler_exceptions(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    # pylint: disable=inconsistent-return-statements
    @functools.wraps(func)
    def wrapper(*args, **kwargs) -> Any | None:  # type: ignore
        try:
            return func(*args, **kwargs)

        except Exception as err:  # pylint: disable=W
            logger.exception(f"{func.__name__} handler error: {err}")

    return wrapper


def is_working_time() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è."""
    current_hour = int(datetime.now().strftime("%H"))
    return 8 < current_hour < 18
